diff --git a/node_modules/@mui/joy/Grid/Grid.js b/node_modules/@mui/joy/Grid/Grid.js
index c6df562..2dbe403 100644
--- a/node_modules/@mui/joy/Grid/Grid.js
+++ b/node_modules/@mui/joy/Grid/Grid.js
@@ -1,7 +1,7 @@
 'use client';
 
 import PropTypes from 'prop-types';
-import { createGrid } from '@mui/system/Unstable_Grid';
+import { createGrid } from '@mui/system/Grid';
 import { styled, useThemeProps } from '../styles';
 /**
  *
diff --git a/node_modules/@mui/joy/styles/extendTheme.d.ts b/node_modules/@mui/joy/styles/extendTheme.d.ts
index 8ea5343..7be0e60 100644
--- a/node_modules/@mui/joy/styles/extendTheme.d.ts
+++ b/node_modules/@mui/joy/styles/extendTheme.d.ts
@@ -38,6 +38,23 @@ export interface CssVarsThemeOptions extends Partial2Level<ThemeScalesOptions> {
      * // { ..., typography: { body1: { fontSize: 'var(--fontSize-md)' } }, ... }
      */
     cssVarPrefix?: string;
+    /**
+     * The strategy to generate CSS variables
+     *
+     * @example 'media'
+     * Generate CSS variables using [prefers-color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme)
+     *
+     * @example '.mode-%s'
+     * Generate CSS variables within a class .mode-light, .mode-dark
+     *
+     * @example '[data-mode-%s]'
+     * Generate CSS variables within a data attribute [data-mode-light], [data-mode-dark]
+     */
+    colorSchemeSelector?: 'media' | 'class' | 'data' | string;
+    /**
+     * @default 'light'
+     */
+    defaultColorScheme?: DefaultColorScheme | ExtendedColorScheme;
     direction?: 'ltr' | 'rtl';
     focus?: Partial<Focus>;
     typography?: Partial<TypographySystemOptions>;
@@ -55,23 +72,6 @@ export interface CssVarsThemeOptions extends Partial2Level<ThemeScalesOptions> {
      *        value = 'var(--test)'
      */
     shouldSkipGeneratingVar?: (keys: string[], value: string | number) => boolean;
-    /**
-     * If provided, it will be used to create a selector for the color scheme.
-     * This is useful if you want to use class or data-* attributes to apply the color scheme.
-     *
-     * The callback receives the colorScheme with the possible values of:
-     * - undefined: the selector for tokens that are not color scheme dependent
-     * - string: the selector for the color scheme
-     *
-     * @example
-     * // class selector
-     * (colorScheme) => colorScheme !== 'light' ? `.theme-${colorScheme}` : ":root"
-     *
-     * @example
-     * // data-* attribute selector
-     * (colorScheme) => colorScheme !== 'light' ? `[data-theme="${colorScheme}"`] : ":root"
-     */
-    getSelector?: (colorScheme: SupportedColorScheme | undefined, css: Record<string, any>) => string | Record<string, any>;
 }
 export declare const createGetCssVar: (cssVarPrefix?: string) => <AdditionalVars extends string = never>(field: ThemeCssVar | AdditionalVars, ...fallbacks: (ThemeCssVar | AdditionalVars)[]) => string;
 export default function extendTheme(themeOptions?: CssVarsThemeOptions): Theme;
diff --git a/node_modules/@mui/joy/styles/extendTheme.js b/node_modules/@mui/joy/styles/extendTheme.js
index 8df6b31..4119a6c 100644
--- a/node_modules/@mui/joy/styles/extendTheme.js
+++ b/node_modules/@mui/joy/styles/extendTheme.js
@@ -2,7 +2,7 @@ import { deepmerge } from '@mui/utils';
 import { createBreakpoints, createSpacing, colorChannel, unstable_prepareCssVars as prepareCssVars, unstable_createGetCssVar as systemCreateGetCssVar, unstable_styleFunctionSx as styleFunctionSx } from '@mui/system';
 import cssContainerQueries from '@mui/system/cssContainerQueries';
 import { unstable_applyStyles as applyStyles } from '@mui/system/createTheme';
-import { prepareTypographyVars } from '@mui/system/cssVars';
+import { prepareTypographyVars, createGetColorSchemeSelector } from '@mui/system/cssVars';
 import { createUnarySpacing } from '@mui/system/spacing';
 import defaultSxConfig from './sxConfig';
 import colors from '../colors';
@@ -36,7 +36,7 @@ export default function extendTheme(themeOptions) {
     components: componentsInput,
     variants: variantsInput,
     shouldSkipGeneratingVar = defaultShouldSkipGeneratingVar,
-    getSelector,
+    colorSchemeSelector = 'data-joy-color-scheme',
     ...scalesInput
   } = themeOptions || {};
   const getCssVar = createGetCssVar(cssVarPrefix);
@@ -398,6 +398,7 @@ export default function extendTheme(themeOptions) {
     ...mergedScales
   } = scalesInput ? deepmerge(defaultScales, scalesInput) : defaultScales;
   let theme = {
+    colorSchemeSelector,
     colorSchemes,
     defaultColorScheme: 'light',
     ...mergedScales,
@@ -478,24 +479,15 @@ export default function extendTheme(themeOptions) {
   // ===============================================================
   const parserConfig = {
     prefix: cssVarPrefix,
+    colorSchemeSelector,
+    disableCssColorScheme: true,
     shouldSkipGeneratingVar,
-    getSelector: getSelector || (colorScheme => {
-      if (theme.defaultColorScheme === colorScheme) {
-        return `${theme.colorSchemeSelector}, [${theme.attribute}="${colorScheme}"]`;
-      }
-      if (colorScheme) {
-        return `[${theme.attribute}="${colorScheme}"]`;
-      }
-      return theme.colorSchemeSelector;
-    })
   };
   const {
     vars,
     generateThemeVars,
     generateStyleSheets
   } = prepareCssVars(theme, parserConfig);
-  theme.attribute = 'data-joy-color-scheme';
-  theme.colorSchemeSelector = ':root';
   theme.vars = vars;
   theme.generateThemeVars = generateThemeVars;
   theme.generateStyleSheets = generateStyleSheets;
@@ -514,7 +506,8 @@ export default function extendTheme(themeOptions) {
       theme: this
     });
   };
-  theme.getColorSchemeSelector = colorScheme => `[${theme.attribute}="${colorScheme}"] &`;
+  theme.getColorSchemeSelector = createGetColorSchemeSelector(colorSchemeSelector);
+  
   const createVariantInput = {
     getCssVar,
     palette: theme.colorSchemes.light.palette
diff --git a/node_modules/@mui/joy/styles/shouldSkipGeneratingVar.js b/node_modules/@mui/joy/styles/shouldSkipGeneratingVar.js
index 36e3ac6..6eab0f9 100644
--- a/node_modules/@mui/joy/styles/shouldSkipGeneratingVar.js
+++ b/node_modules/@mui/joy/styles/shouldSkipGeneratingVar.js
@@ -1,5 +1,5 @@
 export default function shouldSkipGeneratingVar(keys) {
-  return !!keys[0].match(/^(typography|variants|breakpoints)$/) || !!keys[0].match(/sxConfig$/) ||
+  return !!keys[0].match(/^(colorSchemeSelector|typography|variants|breakpoints)$/) || !!keys[0].match(/sxConfig$/) ||
   // ends with sxConfig
   keys[0] === 'palette' && !!keys[1]?.match(/^(mode)$/) || keys[0] === 'focus' && keys[1] !== 'thickness';
 }
\ No newline at end of file
